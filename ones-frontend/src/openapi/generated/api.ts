/* tslint:disable */
/* eslint-disable */
/**
 * Ones API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChangePasswordDto
 */
export interface ChangePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    oldPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    newPassword?: string;
}
/**
 * 
 * @export
 * @interface ContestDto
 */
export interface ContestDto {
    /**
     * 
     * @type {number}
     * @memberof ContestDto
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ContestDto
     */
    version?: number;
    /**
     * 
     * @type {string}
     * @memberof ContestDto
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof ContestDto
     */
    lastModified?: string;
    /**
     * 
     * @type {string}
     * @memberof ContestDto
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ContestDto
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ContestDto
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof ContestDto
     */
    end?: string;
    /**
     * 
     * @type {number}
     * @memberof ContestDto
     */
    distance?: number;
    /**
     * 
     * @type {RiderDto}
     * @memberof ContestDto
     */
    organizer?: RiderDto;
}
/**
 * 
 * @export
 * @interface ErrorDto
 */
export interface ErrorDto {
    /**
     * 
     * @type {string}
     * @memberof ErrorDto
     */
    userMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDto
     */
    exceptionMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDto
     */
    exceptionType?: string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordDto
 */
export interface ForgotPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    emailAddress?: string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordSetNewPasswordDto
 */
export interface ForgotPasswordSetNewPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordSetNewPasswordDto
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordSetNewPasswordDto
     */
    newPassword?: string;
}
/**
 * 
 * @export
 * @interface HorseDto
 */
export interface HorseDto {
    /**
     * 
     * @type {string}
     * @memberof HorseDto
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof HorseDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof HorseDto
     */
    lifeNumber?: string;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface RegistrationDto
 */
export interface RegistrationDto {
    /**
     * 
     * @type {string}
     * @memberof RegistrationDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationDto
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface ResultDto
 */
export interface ResultDto {
    /**
     * 
     * @type {ContestDto}
     * @memberof ResultDto
     */
    contest?: ContestDto;
    /**
     * 
     * @type {HorseDto}
     * @memberof ResultDto
     */
    horse?: HorseDto;
    /**
     * 
     * @type {number}
     * @memberof ResultDto
     */
    placement?: number;
    /**
     * 
     * @type {number}
     * @memberof ResultDto
     */
    averageSpeed?: number;
}
/**
 * 
 * @export
 * @interface ResultOverviewDto
 */
export interface ResultOverviewDto {
    /**
     * 
     * @type {Array<ResultDto>}
     * @memberof ResultOverviewDto
     */
    results?: Array<ResultDto>;
    /**
     * 
     * @type {number}
     * @memberof ResultOverviewDto
     */
    averageSpeed?: number;
    /**
     * 
     * @type {number}
     * @memberof ResultOverviewDto
     */
    totalDistance?: number;
}
/**
 * 
 * @export
 * @interface RiderDto
 */
export interface RiderDto {
    /**
     * 
     * @type {number}
     * @memberof RiderDto
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof RiderDto
     */
    version?: number;
    /**
     * 
     * @type {string}
     * @memberof RiderDto
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof RiderDto
     */
    lastModified?: string;
    /**
     * 
     * @type {string}
     * @memberof RiderDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof RiderDto
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof RiderDto
     */
    lastName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RiderDto
     */
    initialDataSetupCompleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RiderDto
     */
    allNecessaryDataPresent?: boolean;
}

/**
 * ChangePasswordControllerApi - axios parameter creator
 * @export
 */
export const ChangePasswordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (changePasswordDto: ChangePasswordDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordDto' is not null or undefined
            assertParamExists('changePassword', 'changePasswordDto', changePasswordDto)
            const localVarPath = `/api/v1/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChangePasswordControllerApi - functional programming interface
 * @export
 */
export const ChangePasswordControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChangePasswordControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(changePasswordDto: ChangePasswordDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChangePasswordControllerApi - factory interface
 * @export
 */
export const ChangePasswordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChangePasswordControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(changePasswordDto: ChangePasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.changePassword(changePasswordDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChangePasswordControllerApi - object-oriented interface
 * @export
 * @class ChangePasswordControllerApi
 * @extends {BaseAPI}
 */
export class ChangePasswordControllerApi extends BaseAPI {
    /**
     * 
     * @param {ChangePasswordDto} changePasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangePasswordControllerApi
     */
    public changePassword(changePasswordDto: ChangePasswordDto, options?: any) {
        return ChangePasswordControllerApiFp(this.configuration).changePassword(changePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ContestControllerApi - axios parameter creator
 * @export
 */
export const ContestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [titleContains] 
         * @param {string} [descriptionContains] 
         * @param {string} [startsBefore] 
         * @param {string} [startsAfter] 
         * @param {string} [endsBefore] 
         * @param {string} [endsAfter] 
         * @param {number} [organizerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (titleContains?: string, descriptionContains?: string, startsBefore?: string, startsAfter?: string, endsBefore?: string, endsAfter?: string, organizerId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/contest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (titleContains !== undefined) {
                localVarQueryParameter['titleContains'] = titleContains;
            }

            if (descriptionContains !== undefined) {
                localVarQueryParameter['descriptionContains'] = descriptionContains;
            }

            if (startsBefore !== undefined) {
                localVarQueryParameter['startsBefore'] = (startsBefore as any instanceof Date) ?
                    (startsBefore as any).toISOString() :
                    startsBefore;
            }

            if (startsAfter !== undefined) {
                localVarQueryParameter['startsAfter'] = (startsAfter as any instanceof Date) ?
                    (startsAfter as any).toISOString() :
                    startsAfter;
            }

            if (endsBefore !== undefined) {
                localVarQueryParameter['endsBefore'] = (endsBefore as any instanceof Date) ?
                    (endsBefore as any).toISOString() :
                    endsBefore;
            }

            if (endsAfter !== undefined) {
                localVarQueryParameter['endsAfter'] = (endsAfter as any instanceof Date) ?
                    (endsAfter as any).toISOString() :
                    endsAfter;
            }

            if (organizerId !== undefined) {
                localVarQueryParameter['organizerId'] = organizerId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneById: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findOneById', 'id', id)
            const localVarPath = `/api/v1/contest/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContestControllerApi - functional programming interface
 * @export
 */
export const ContestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [titleContains] 
         * @param {string} [descriptionContains] 
         * @param {string} [startsBefore] 
         * @param {string} [startsAfter] 
         * @param {string} [endsBefore] 
         * @param {string} [endsAfter] 
         * @param {number} [organizerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(titleContains?: string, descriptionContains?: string, startsBefore?: string, startsAfter?: string, endsBefore?: string, endsAfter?: string, organizerId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContestDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(titleContains, descriptionContains, startsBefore, startsAfter, endsBefore, endsAfter, organizerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOneById(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOneById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContestControllerApi - factory interface
 * @export
 */
export const ContestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [titleContains] 
         * @param {string} [descriptionContains] 
         * @param {string} [startsBefore] 
         * @param {string} [startsAfter] 
         * @param {string} [endsBefore] 
         * @param {string} [endsAfter] 
         * @param {number} [organizerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(titleContains?: string, descriptionContains?: string, startsBefore?: string, startsAfter?: string, endsBefore?: string, endsAfter?: string, organizerId?: number, options?: any): AxiosPromise<Array<ContestDto>> {
            return localVarFp.findAll(titleContains, descriptionContains, startsBefore, startsAfter, endsBefore, endsAfter, organizerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneById(id: number, options?: any): AxiosPromise<ContestDto> {
            return localVarFp.findOneById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContestControllerApi - object-oriented interface
 * @export
 * @class ContestControllerApi
 * @extends {BaseAPI}
 */
export class ContestControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} [titleContains] 
     * @param {string} [descriptionContains] 
     * @param {string} [startsBefore] 
     * @param {string} [startsAfter] 
     * @param {string} [endsBefore] 
     * @param {string} [endsAfter] 
     * @param {number} [organizerId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContestControllerApi
     */
    public findAll(titleContains?: string, descriptionContains?: string, startsBefore?: string, startsAfter?: string, endsBefore?: string, endsAfter?: string, organizerId?: number, options?: any) {
        return ContestControllerApiFp(this.configuration).findAll(titleContains, descriptionContains, startsBefore, startsAfter, endsBefore, endsAfter, organizerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContestControllerApi
     */
    public findOneById(id: number, options?: any) {
        return ContestControllerApiFp(this.configuration).findOneById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ForgotPasswordControllerApi - axios parameter creator
 * @export
 */
export const ForgotPasswordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (forgotPasswordDto: ForgotPasswordDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDto' is not null or undefined
            assertParamExists('forgotPassword', 'forgotPasswordDto', forgotPasswordDto)
            const localVarPath = `/api/v1/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordSetNewPasswordDto} forgotPasswordSetNewPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordSetNewPassword: async (forgotPasswordSetNewPasswordDto: ForgotPasswordSetNewPasswordDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordSetNewPasswordDto' is not null or undefined
            assertParamExists('forgotPasswordSetNewPassword', 'forgotPasswordSetNewPasswordDto', forgotPasswordSetNewPasswordDto)
            const localVarPath = `/api/v1/forgot-password/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordSetNewPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ForgotPasswordControllerApi - functional programming interface
 * @export
 */
export const ForgotPasswordControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ForgotPasswordControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(forgotPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordSetNewPasswordDto} forgotPasswordSetNewPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto: ForgotPasswordSetNewPasswordDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ForgotPasswordControllerApi - factory interface
 * @export
 */
export const ForgotPasswordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ForgotPasswordControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.forgotPassword(forgotPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordSetNewPasswordDto} forgotPasswordSetNewPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto: ForgotPasswordSetNewPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ForgotPasswordControllerApi - object-oriented interface
 * @export
 * @class ForgotPasswordControllerApi
 * @extends {BaseAPI}
 */
export class ForgotPasswordControllerApi extends BaseAPI {
    /**
     * 
     * @param {ForgotPasswordDto} forgotPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForgotPasswordControllerApi
     */
    public forgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any) {
        return ForgotPasswordControllerApiFp(this.configuration).forgotPassword(forgotPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ForgotPasswordSetNewPasswordDto} forgotPasswordSetNewPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForgotPasswordControllerApi
     */
    public forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto: ForgotPasswordSetNewPasswordDto, options?: any) {
        return ForgotPasswordControllerApiFp(this.configuration).forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginControllerApi - axios parameter creator
 * @export
 */
export const LoginControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginDto: LoginDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('login', 'loginDto', loginDto)
            const localVarPath = `/api/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginControllerApi - functional programming interface
 * @export
 */
export const LoginControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginDto: LoginDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginControllerApi - factory interface
 * @export
 */
export const LoginControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginDto: LoginDto, options?: any): AxiosPromise<string> {
            return localVarFp.login(loginDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginControllerApi - object-oriented interface
 * @export
 * @class LoginControllerApi
 * @extends {BaseAPI}
 */
export class LoginControllerApi extends BaseAPI {
    /**
     * 
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public login(loginDto: LoginDto, options?: any) {
        return LoginControllerApiFp(this.configuration).login(loginDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegistrationControllerApi - axios parameter creator
 * @export
 */
export const RegistrationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmRegistration: async (code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('confirmRegistration', 'code', code)
            const localVarPath = `/api/v1/register/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegistrationDto} registrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration: async (registrationDto: RegistrationDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationDto' is not null or undefined
            assertParamExists('createRegistration', 'registrationDto', registrationDto)
            const localVarPath = `/api/v1/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registrationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrationControllerApi - functional programming interface
 * @export
 */
export const RegistrationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistrationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmRegistration(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmRegistration(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegistrationDto} registrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRegistration(registrationDto: RegistrationDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRegistration(registrationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegistrationControllerApi - factory interface
 * @export
 */
export const RegistrationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistrationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmRegistration(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.confirmRegistration(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegistrationDto} registrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration(registrationDto: RegistrationDto, options?: any): AxiosPromise<void> {
            return localVarFp.createRegistration(registrationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistrationControllerApi - object-oriented interface
 * @export
 * @class RegistrationControllerApi
 * @extends {BaseAPI}
 */
export class RegistrationControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public confirmRegistration(code: string, options?: any) {
        return RegistrationControllerApiFp(this.configuration).confirmRegistration(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegistrationDto} registrationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public createRegistration(registrationDto: RegistrationDto, options?: any) {
        return RegistrationControllerApiFp(this.configuration).createRegistration(registrationDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ResultControllerApi - axios parameter creator
 * @export
 */
export const ResultControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyResults: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/results/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResultControllerApi - functional programming interface
 * @export
 */
export const ResultControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResultControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyResults(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultOverviewDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyResults(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResultControllerApi - factory interface
 * @export
 */
export const ResultControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResultControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyResults(options?: any): AxiosPromise<ResultOverviewDto> {
            return localVarFp.getMyResults(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResultControllerApi - object-oriented interface
 * @export
 * @class ResultControllerApi
 * @extends {BaseAPI}
 */
export class ResultControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultControllerApi
     */
    public getMyResults(options?: any) {
        return ResultControllerApiFp(this.configuration).getMyResults(options).then((request) => request(this.axios, this.basePath));
    }
}


