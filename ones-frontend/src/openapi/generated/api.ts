/* tslint:disable */
/* eslint-disable */
/**
 * Ones API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccommodationDto
 */
export interface AccommodationDto {
    /**
     * 
     * @type {string}
     * @memberof AccommodationDto
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof AccommodationDto
     */
    type?: string;
    /**
     * 
     * @type {FeeDto}
     * @memberof AccommodationDto
     */
    fee?: FeeDto;
    /**
     * 
     * @type {string}
     * @memberof AccommodationDto
     */
    feeUnit?: string;
    /**
     * 
     * @type {FeeDto}
     * @memberof AccommodationDto
     */
    pledgeFee?: FeeDto;
    /**
     * 
     * @type {string}
     * @memberof AccommodationDto
     */
    additionalInformation?: string;
}
/**
 * 
 * @export
 * @interface AddressDto
 */
export interface AddressDto {
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    locationName?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    houseNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    zipCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    country?: string;
}
/**
 * 
 * @export
 * @interface ChangePasswordDto
 */
export interface ChangePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    oldPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    newPassword?: string;
}
/**
 * 
 * @export
 * @interface ConnectionTestResult
 */
export interface ConnectionTestResult {
    /**
     * 
     * @type {string}
     * @memberof ConnectionTestResult
     */
    timestamp?: string;
}
/**
 * 
 * @export
 * @interface ContestCategory
 */
export interface ContestCategory {
    /**
     * 
     * @type {string}
     * @memberof ContestCategory
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ContestCategory
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface ErrorDto
 */
export interface ErrorDto {
    /**
     * 
     * @type {string}
     * @memberof ErrorDto
     */
    userMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDto
     */
    exceptionMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDto
     */
    exceptionType?: string;
}
/**
 * 
 * @export
 * @interface EventAddressDto
 */
export interface EventAddressDto {
    /**
     * 
     * @type {string}
     * @memberof EventAddressDto
     */
    locationName?: string;
    /**
     * 
     * @type {string}
     * @memberof EventAddressDto
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof EventAddressDto
     */
    houseNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof EventAddressDto
     */
    zipCode?: string;
    /**
     * 
     * @type {string}
     * @memberof EventAddressDto
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof EventAddressDto
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof EventAddressDto
     */
    gpsCoordinates?: string;
    /**
     * 
     * @type {string}
     * @memberof EventAddressDto
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface FeeDto
 */
export interface FeeDto {
    /**
     * 
     * @type {number}
     * @memberof FeeDto
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof FeeDto
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordDto
 */
export interface ForgotPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    emailAddress?: string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordSetNewPasswordDto
 */
export interface ForgotPasswordSetNewPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordSetNewPasswordDto
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordSetNewPasswordDto
     */
    newPassword?: string;
}
/**
 * 
 * @export
 * @interface FullContestDto
 */
export interface FullContestDto {
    /**
     * 
     * @type {string}
     * @memberof FullContestDto
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof FullContestDto
     */
    category?: string;
    /**
     * 
     * @type {number}
     * @memberof FullContestDto
     */
    distance?: number;
    /**
     * 
     * @type {string}
     * @memberof FullContestDto
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof FullContestDto
     */
    qualificationLevel?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FullContestDto
     */
    isMap?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FullContestDto
     */
    numberOfStages?: number;
    /**
     * 
     * @type {number}
     * @memberof FullContestDto
     */
    minimumHorseAge?: number;
    /**
     * 
     * @type {number}
     * @memberof FullContestDto
     */
    maximumHorseAge?: number;
    /**
     * 
     * @type {number}
     * @memberof FullContestDto
     */
    minimumParticipantAge?: number;
    /**
     * 
     * @type {number}
     * @memberof FullContestDto
     */
    maximumParticipantAge?: number;
    /**
     * 
     * @type {number}
     * @memberof FullContestDto
     */
    minimumParticipants?: number;
    /**
     * 
     * @type {number}
     * @memberof FullContestDto
     */
    maximumParticipants?: number;
    /**
     * 
     * @type {number}
     * @memberof FullContestDto
     */
    currentParticipants?: number;
    /**
     * 
     * @type {string}
     * @memberof FullContestDto
     */
    markings?: string;
    /**
     * 
     * @type {string}
     * @memberof FullContestDto
     */
    signedUpHorses?: string;
}
/**
 * 
 * @export
 * @interface FullEventDto
 */
export interface FullEventDto {
    /**
     * 
     * @type {string}
     * @memberof FullEventDto
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof FullEventDto
     */
    status?: FullEventDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof FullEventDto
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof FullEventDto
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof FullEventDto
     */
    end?: string;
    /**
     * 
     * @type {string}
     * @memberof FullEventDto
     */
    region?: string;
    /**
     * 
     * @type {Array<EventAddressDto>}
     * @memberof FullEventDto
     */
    addresses?: Array<EventAddressDto>;
    /**
     * 
     * @type {boolean}
     * @memberof FullEventDto
     */
    isNationalChampionship?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FullEventDto
     */
    isInternational?: boolean;
    /**
     * 
     * @type {Array<SimpleContestDto>}
     * @memberof FullEventDto
     */
    contests?: Array<SimpleContestDto>;
    /**
     * 
     * @type {PersonDto}
     * @memberof FullEventDto
     */
    eventHost?: PersonDto;
    /**
     * 
     * @type {PersonDto}
     * @memberof FullEventDto
     */
    eventOrganizer?: PersonDto;
    /**
     * 
     * @type {PersonDto}
     * @memberof FullEventDto
     */
    contactPerson?: PersonDto;
    /**
     * 
     * @type {string}
     * @memberof FullEventDto
     */
    signupDeadline?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FullEventDto
     */
    signupAfterDeadlinePossible?: boolean;
    /**
     * 
     * @type {FeeDto}
     * @memberof FullEventDto
     */
    lateSignupFee?: FeeDto;
    /**
     * 
     * @type {FeeDto}
     * @memberof FullEventDto
     */
    signupChangeFee?: FeeDto;
    /**
     * 
     * @type {string}
     * @memberof FullEventDto
     */
    vaccinationInformation?: string;
    /**
     * 
     * @type {string}
     * @memberof FullEventDto
     */
    helmetInformation?: string;
    /**
     * 
     * @type {Array<AccommodationDto>}
     * @memberof FullEventDto
     */
    availableAccommodations?: Array<AccommodationDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FullEventDto
     */
    additionalComments?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof FullEventDto
     */
    organizerWebsiteUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof FullEventDto
     */
    signupDocumentUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof FullEventDto
     */
    minimumParticipants?: number;
    /**
     * 
     * @type {number}
     * @memberof FullEventDto
     */
    maximumParticipants?: number;
    /**
     * 
     * @type {number}
     * @memberof FullEventDto
     */
    currentParticipants?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum FullEventDtoStatusEnum {
    Cancelled = 'CANCELLED',
    DatePassed = 'DATE_PASSED',
    DatePreliminary = 'DATE_PRELIMINARY',
    DateFix = 'DATE_FIX',
    Updated = 'UPDATED',
    Unknown = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface HorseDto
 */
export interface HorseDto {
    /**
     * 
     * @type {string}
     * @memberof HorseDto
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof HorseDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof HorseDto
     */
    lifeNumber?: string;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface PageDtoSimpleEventDto
 */
export interface PageDtoSimpleEventDto {
    /**
     * 
     * @type {Array<SimpleEventDto>}
     * @memberof PageDtoSimpleEventDto
     */
    elements?: Array<SimpleEventDto>;
    /**
     * 
     * @type {number}
     * @memberof PageDtoSimpleEventDto
     */
    pageNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof PageDtoSimpleEventDto
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof PageDtoSimpleEventDto
     */
    totalElements?: number;
}
/**
 * 
 * @export
 * @interface PersonDto
 */
export interface PersonDto {
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    lastName?: string;
    /**
     * 
     * @type {AddressDto}
     * @memberof PersonDto
     */
    address?: AddressDto;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    phoneNumberMobile?: string;
}
/**
 * 
 * @export
 * @interface RegistrationDto
 */
export interface RegistrationDto {
    /**
     * 
     * @type {string}
     * @memberof RegistrationDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationDto
     */
    password?: string;
    /**
     * 
     * @type {number}
     * @memberof RegistrationDto
     */
    vddMemberNumber?: number;
}
/**
 * 
 * @export
 * @interface ResultDto
 */
export interface ResultDto {
    /**
     * 
     * @type {SimpleContestDto}
     * @memberof ResultDto
     */
    contest?: SimpleContestDto;
    /**
     * 
     * @type {Array<HorseDto>}
     * @memberof ResultDto
     */
    horses?: Array<HorseDto>;
    /**
     * 
     * @type {number}
     * @memberof ResultDto
     */
    placement?: number;
    /**
     * 
     * @type {number}
     * @memberof ResultDto
     */
    averageSpeed?: number;
}
/**
 * 
 * @export
 * @interface ResultOverviewDto
 */
export interface ResultOverviewDto {
    /**
     * 
     * @type {Array<ResultDto>}
     * @memberof ResultOverviewDto
     */
    results?: Array<ResultDto>;
    /**
     * 
     * @type {number}
     * @memberof ResultOverviewDto
     */
    totalDistance?: number;
    /**
     * 
     * @type {number}
     * @memberof ResultOverviewDto
     */
    averageSpeed?: number;
}
/**
 * 
 * @export
 * @interface SignupRequestDto
 */
export interface SignupRequestDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof SignupRequestDto
     */
    horseUuids?: Array<string>;
}
/**
 * 
 * @export
 * @interface SimpleContestDto
 */
export interface SimpleContestDto {
    /**
     * 
     * @type {string}
     * @memberof SimpleContestDto
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleContestDto
     */
    category?: string;
    /**
     * 
     * @type {number}
     * @memberof SimpleContestDto
     */
    distance?: number;
}
/**
 * 
 * @export
 * @interface SimpleEventDto
 */
export interface SimpleEventDto {
    /**
     * 
     * @type {string}
     * @memberof SimpleEventDto
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleEventDto
     */
    status?: SimpleEventDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof SimpleEventDto
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleEventDto
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleEventDto
     */
    end?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleEventDto
     */
    region?: string;
    /**
     * 
     * @type {Array<EventAddressDto>}
     * @memberof SimpleEventDto
     */
    addresses?: Array<EventAddressDto>;
    /**
     * 
     * @type {boolean}
     * @memberof SimpleEventDto
     */
    isNationalChampionship?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SimpleEventDto
     */
    isInternational?: boolean;
    /**
     * 
     * @type {Array<SimpleContestDto>}
     * @memberof SimpleEventDto
     */
    contests?: Array<SimpleContestDto>;
}

/**
    * @export
    * @enum {string}
    */
export enum SimpleEventDtoStatusEnum {
    Cancelled = 'CANCELLED',
    DatePassed = 'DATE_PASSED',
    DatePreliminary = 'DATE_PRELIMINARY',
    DateFix = 'DATE_FIX',
    Updated = 'UPDATED',
    Unknown = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    lastName?: string;
    /**
     * 
     * @type {AddressDto}
     * @memberof UserDto
     */
    address?: AddressDto;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    phoneNumberMobile?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    vddNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    feiNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    fnNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    qualificationLevel?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    qualificationLevelApproved?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    phoneNumberEmergency?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    birthName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    birthday?: string;
}

/**
 * ChangePasswordControllerApi - axios parameter creator
 * @export
 */
export const ChangePasswordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (changePasswordDto: ChangePasswordDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordDto' is not null or undefined
            assertParamExists('changePassword', 'changePasswordDto', changePasswordDto)
            const localVarPath = `/api/v1/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChangePasswordControllerApi - functional programming interface
 * @export
 */
export const ChangePasswordControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChangePasswordControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(changePasswordDto: ChangePasswordDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChangePasswordControllerApi - factory interface
 * @export
 */
export const ChangePasswordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChangePasswordControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(changePasswordDto: ChangePasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.changePassword(changePasswordDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChangePasswordControllerApi - object-oriented interface
 * @export
 * @class ChangePasswordControllerApi
 * @extends {BaseAPI}
 */
export class ChangePasswordControllerApi extends BaseAPI {
    /**
     * 
     * @param {ChangePasswordDto} changePasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangePasswordControllerApi
     */
    public changePassword(changePasswordDto: ChangePasswordDto, options?: any) {
        return ChangePasswordControllerApiFp(this.configuration).changePassword(changePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConnectionTestControllerApi - axios parameter creator
 * @export
 */
export const ConnectionTestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/connection-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectionTestControllerApi - functional programming interface
 * @export
 */
export const ConnectionTestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectionTestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testConnection(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionTestResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testConnection(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConnectionTestControllerApi - factory interface
 * @export
 */
export const ConnectionTestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConnectionTestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection(options?: any): AxiosPromise<ConnectionTestResult> {
            return localVarFp.testConnection(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConnectionTestControllerApi - object-oriented interface
 * @export
 * @class ConnectionTestControllerApi
 * @extends {BaseAPI}
 */
export class ConnectionTestControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionTestControllerApi
     */
    public testConnection(options?: any) {
        return ConnectionTestControllerApiFp(this.configuration).testConnection(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventControllerApi - axios parameter creator
 * @export
 */
export const EventControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} from 
         * @param {string} [until] 
         * @param {Array<string>} [regions] 
         * @param {Array<string>} [categories] 
         * @param {boolean} [isMap] 
         * @param {boolean} [isCountryChampionship] 
         * @param {boolean} [isInternational] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {'ASCENDING' | 'DESCENDING'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (from: string, until?: string, regions?: Array<string>, categories?: Array<string>, isMap?: boolean, isCountryChampionship?: boolean, isInternational?: boolean, page?: number, pageSize?: number, sortBy?: string, sortDirection?: 'ASCENDING' | 'DESCENDING', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('findAll', 'from', from)
            const localVarPath = `/api/v1/event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = (until as any instanceof Date) ?
                    (until as any).toISOString().substr(0,10) :
                    until;
            }

            if (regions) {
                localVarQueryParameter['regions'] = regions;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }

            if (isMap !== undefined) {
                localVarQueryParameter['isMap'] = isMap;
            }

            if (isCountryChampionship !== undefined) {
                localVarQueryParameter['isCountryChampionship'] = isCountryChampionship;
            }

            if (isInternational !== undefined) {
                localVarQueryParameter['isInternational'] = isInternational;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/event/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRegions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/event/regions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullContests: async (eventUuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventUuid' is not null or undefined
            assertParamExists('getFullContests', 'eventUuid', eventUuid)
            const localVarPath = `/api/v1/event/{eventUuid}/contests`
                .replace(`{${"eventUuid"}}`, encodeURIComponent(String(eventUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullEvent: async (uuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getFullEvent', 'uuid', uuid)
            const localVarPath = `/api/v1/event/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} contestUuid 
         * @param {SignupRequestDto} signupRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp: async (contestUuid: string, signupRequestDto: SignupRequestDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contestUuid' is not null or undefined
            assertParamExists('signUp', 'contestUuid', contestUuid)
            // verify required parameter 'signupRequestDto' is not null or undefined
            assertParamExists('signUp', 'signupRequestDto', signupRequestDto)
            const localVarPath = `/api/v1/event/contest/{contestUuid}/signup`
                .replace(`{${"contestUuid"}}`, encodeURIComponent(String(contestUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventControllerApi - functional programming interface
 * @export
 */
export const EventControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} from 
         * @param {string} [until] 
         * @param {Array<string>} [regions] 
         * @param {Array<string>} [categories] 
         * @param {boolean} [isMap] 
         * @param {boolean} [isCountryChampionship] 
         * @param {boolean} [isInternational] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {'ASCENDING' | 'DESCENDING'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(from: string, until?: string, regions?: Array<string>, categories?: Array<string>, isMap?: boolean, isCountryChampionship?: boolean, isInternational?: boolean, page?: number, pageSize?: number, sortBy?: string, sortDirection?: 'ASCENDING' | 'DESCENDING', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDtoSimpleEventDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(from, until, regions, categories, isMap, isCountryChampionship, isInternational, page, pageSize, sortBy, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategories(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContestCategory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRegions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRegions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} eventUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullContests(eventUuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FullContestDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFullContests(eventUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullEvent(uuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullEventDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFullEvent(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} contestUuid 
         * @param {SignupRequestDto} signupRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(contestUuid: string, signupRequestDto: SignupRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(contestUuid, signupRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventControllerApi - factory interface
 * @export
 */
export const EventControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} from 
         * @param {string} [until] 
         * @param {Array<string>} [regions] 
         * @param {Array<string>} [categories] 
         * @param {boolean} [isMap] 
         * @param {boolean} [isCountryChampionship] 
         * @param {boolean} [isInternational] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {'ASCENDING' | 'DESCENDING'} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(from: string, until?: string, regions?: Array<string>, categories?: Array<string>, isMap?: boolean, isCountryChampionship?: boolean, isInternational?: boolean, page?: number, pageSize?: number, sortBy?: string, sortDirection?: 'ASCENDING' | 'DESCENDING', options?: any): AxiosPromise<PageDtoSimpleEventDto> {
            return localVarFp.findAll(from, until, regions, categories, isMap, isCountryChampionship, isInternational, page, pageSize, sortBy, sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options?: any): AxiosPromise<Array<ContestCategory>> {
            return localVarFp.getAllCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRegions(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getAllRegions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullContests(eventUuid: string, options?: any): AxiosPromise<Array<FullContestDto>> {
            return localVarFp.getFullContests(eventUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullEvent(uuid: string, options?: any): AxiosPromise<FullEventDto> {
            return localVarFp.getFullEvent(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} contestUuid 
         * @param {SignupRequestDto} signupRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp(contestUuid: string, signupRequestDto: SignupRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.signUp(contestUuid, signupRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventControllerApi - object-oriented interface
 * @export
 * @class EventControllerApi
 * @extends {BaseAPI}
 */
export class EventControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} from 
     * @param {string} [until] 
     * @param {Array<string>} [regions] 
     * @param {Array<string>} [categories] 
     * @param {boolean} [isMap] 
     * @param {boolean} [isCountryChampionship] 
     * @param {boolean} [isInternational] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {'ASCENDING' | 'DESCENDING'} [sortDirection] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public findAll(from: string, until?: string, regions?: Array<string>, categories?: Array<string>, isMap?: boolean, isCountryChampionship?: boolean, isInternational?: boolean, page?: number, pageSize?: number, sortBy?: string, sortDirection?: 'ASCENDING' | 'DESCENDING', options?: any) {
        return EventControllerApiFp(this.configuration).findAll(from, until, regions, categories, isMap, isCountryChampionship, isInternational, page, pageSize, sortBy, sortDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getAllCategories(options?: any) {
        return EventControllerApiFp(this.configuration).getAllCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getAllRegions(options?: any) {
        return EventControllerApiFp(this.configuration).getAllRegions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getFullContests(eventUuid: string, options?: any) {
        return EventControllerApiFp(this.configuration).getFullContests(eventUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getFullEvent(uuid: string, options?: any) {
        return EventControllerApiFp(this.configuration).getFullEvent(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} contestUuid 
     * @param {SignupRequestDto} signupRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public signUp(contestUuid: string, signupRequestDto: SignupRequestDto, options?: any) {
        return EventControllerApiFp(this.configuration).signUp(contestUuid, signupRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ForgotPasswordControllerApi - axios parameter creator
 * @export
 */
export const ForgotPasswordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (forgotPasswordDto: ForgotPasswordDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDto' is not null or undefined
            assertParamExists('forgotPassword', 'forgotPasswordDto', forgotPasswordDto)
            const localVarPath = `/api/v1/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordSetNewPasswordDto} forgotPasswordSetNewPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordSetNewPassword: async (forgotPasswordSetNewPasswordDto: ForgotPasswordSetNewPasswordDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordSetNewPasswordDto' is not null or undefined
            assertParamExists('forgotPasswordSetNewPassword', 'forgotPasswordSetNewPasswordDto', forgotPasswordSetNewPasswordDto)
            const localVarPath = `/api/v1/forgot-password/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordSetNewPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ForgotPasswordControllerApi - functional programming interface
 * @export
 */
export const ForgotPasswordControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ForgotPasswordControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(forgotPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordSetNewPasswordDto} forgotPasswordSetNewPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto: ForgotPasswordSetNewPasswordDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ForgotPasswordControllerApi - factory interface
 * @export
 */
export const ForgotPasswordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ForgotPasswordControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.forgotPassword(forgotPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordSetNewPasswordDto} forgotPasswordSetNewPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto: ForgotPasswordSetNewPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ForgotPasswordControllerApi - object-oriented interface
 * @export
 * @class ForgotPasswordControllerApi
 * @extends {BaseAPI}
 */
export class ForgotPasswordControllerApi extends BaseAPI {
    /**
     * 
     * @param {ForgotPasswordDto} forgotPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForgotPasswordControllerApi
     */
    public forgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any) {
        return ForgotPasswordControllerApiFp(this.configuration).forgotPassword(forgotPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ForgotPasswordSetNewPasswordDto} forgotPasswordSetNewPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForgotPasswordControllerApi
     */
    public forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto: ForgotPasswordSetNewPasswordDto, options?: any) {
        return ForgotPasswordControllerApiFp(this.configuration).forgotPasswordSetNewPassword(forgotPasswordSetNewPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HorseControllerApi - axios parameter creator
 * @export
 */
export const HorseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyHorses: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/horse/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HorseControllerApi - functional programming interface
 * @export
 */
export const HorseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HorseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyHorses(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HorseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyHorses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HorseControllerApi - factory interface
 * @export
 */
export const HorseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HorseControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyHorses(options?: any): AxiosPromise<Array<HorseDto>> {
            return localVarFp.getMyHorses(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HorseControllerApi - object-oriented interface
 * @export
 * @class HorseControllerApi
 * @extends {BaseAPI}
 */
export class HorseControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HorseControllerApi
     */
    public getMyHorses(options?: any) {
        return HorseControllerApiFp(this.configuration).getMyHorses(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginControllerApi - axios parameter creator
 * @export
 */
export const LoginControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginDto: LoginDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('login', 'loginDto', loginDto)
            const localVarPath = `/api/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginControllerApi - functional programming interface
 * @export
 */
export const LoginControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginDto: LoginDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginControllerApi - factory interface
 * @export
 */
export const LoginControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginDto: LoginDto, options?: any): AxiosPromise<string> {
            return localVarFp.login(loginDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginControllerApi - object-oriented interface
 * @export
 * @class LoginControllerApi
 * @extends {BaseAPI}
 */
export class LoginControllerApi extends BaseAPI {
    /**
     * 
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public login(loginDto: LoginDto, options?: any) {
        return LoginControllerApiFp(this.configuration).login(loginDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegistrationControllerApi - axios parameter creator
 * @export
 */
export const RegistrationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmRegistration: async (code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('confirmRegistration', 'code', code)
            const localVarPath = `/api/v1/register/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegistrationDto} registrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration: async (registrationDto: RegistrationDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationDto' is not null or undefined
            assertParamExists('createRegistration', 'registrationDto', registrationDto)
            const localVarPath = `/api/v1/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registrationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrationControllerApi - functional programming interface
 * @export
 */
export const RegistrationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistrationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmRegistration(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmRegistration(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegistrationDto} registrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRegistration(registrationDto: RegistrationDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRegistration(registrationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegistrationControllerApi - factory interface
 * @export
 */
export const RegistrationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistrationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmRegistration(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.confirmRegistration(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegistrationDto} registrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration(registrationDto: RegistrationDto, options?: any): AxiosPromise<void> {
            return localVarFp.createRegistration(registrationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistrationControllerApi - object-oriented interface
 * @export
 * @class RegistrationControllerApi
 * @extends {BaseAPI}
 */
export class RegistrationControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public confirmRegistration(code: string, options?: any) {
        return RegistrationControllerApiFp(this.configuration).confirmRegistration(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegistrationDto} registrationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public createRegistration(registrationDto: RegistrationDto, options?: any) {
        return RegistrationControllerApiFp(this.configuration).createRegistration(registrationDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ResultControllerApi - axios parameter creator
 * @export
 */
export const ResultControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyResults: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/results/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResultControllerApi - functional programming interface
 * @export
 */
export const ResultControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResultControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyResults(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultOverviewDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyResults(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResultControllerApi - factory interface
 * @export
 */
export const ResultControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResultControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyResults(options?: any): AxiosPromise<ResultOverviewDto> {
            return localVarFp.getMyResults(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResultControllerApi - object-oriented interface
 * @export
 * @class ResultControllerApi
 * @extends {BaseAPI}
 */
export class ResultControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultControllerApi
     */
    public getMyResults(options?: any) {
        return ResultControllerApiFp(this.configuration).getMyResults(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPersonalData: async (userDto: UserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('setPersonalData', 'userDto', userDto)
            const localVarPath = `/api/v1/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPersonalData(userDto: UserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPersonalData(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPersonalData(userDto: UserDto, options?: any): AxiosPromise<void> {
            return localVarFp.setPersonalData(userDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getCurrentUser(options?: any) {
        return UserControllerApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public setPersonalData(userDto: UserDto, options?: any) {
        return UserControllerApiFp(this.configuration).setPersonalData(userDto, options).then((request) => request(this.axios, this.basePath));
    }
}


