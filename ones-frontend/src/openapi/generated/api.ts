// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ContestDto
 */
export interface ContestDto {
    /**
     * 
     * @type {number}
     * @memberof ContestDto
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ContestDto
     */
    version?: number;
    /**
     * 
     * @type {Date}
     * @memberof ContestDto
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ContestDto
     */
    lastModified?: Date;
    /**
     * 
     * @type {string}
     * @memberof ContestDto
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ContestDto
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof ContestDto
     */
    start?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ContestDto
     */
    end?: Date;
    /**
     * 
     * @type {RiderDto}
     * @memberof ContestDto
     */
    organizer?: RiderDto;
}
/**
 * 
 * @export
 * @interface ContestFilterDto
 */
export interface ContestFilterDto {
    /**
     * 
     * @type {string}
     * @memberof ContestFilterDto
     */
    titleContains?: string;
    /**
     * 
     * @type {string}
     * @memberof ContestFilterDto
     */
    descriptionContains?: string;
    /**
     * 
     * @type {Date}
     * @memberof ContestFilterDto
     */
    startsBefore?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ContestFilterDto
     */
    startsAfter?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ContestFilterDto
     */
    endsBefore?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ContestFilterDto
     */
    endsAfter?: Date;
    /**
     * 
     * @type {number}
     * @memberof ContestFilterDto
     */
    organizerId?: number;
}
/**
 * 
 * @export
 * @interface ErrorDto
 */
export interface ErrorDto {
    /**
     * 
     * @type {string}
     * @memberof ErrorDto
     */
    userMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDto
     */
    exceptionMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDto
     */
    exceptionType?: string;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface RegistrationDto
 */
export interface RegistrationDto {
    /**
     * 
     * @type {string}
     * @memberof RegistrationDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationDto
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface RiderDto
 */
export interface RiderDto {
    /**
     * 
     * @type {number}
     * @memberof RiderDto
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof RiderDto
     */
    version?: number;
    /**
     * 
     * @type {Date}
     * @memberof RiderDto
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RiderDto
     */
    lastModified?: Date;
    /**
     * 
     * @type {string}
     * @memberof RiderDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof RiderDto
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof RiderDto
     */
    lastName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RiderDto
     */
    initialDataSetupCompleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RiderDto
     */
    allNecessaryDataPresent?: boolean;
}

/**
 * ContestControllerApi - axios parameter creator
 * @export
 */
export const ContestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ContestFilterDto} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(filter: ContestFilterDto, options: any = {}): RequestArgs {
            // verify required parameter 'filter' is not null or undefined
            if (filter === null || filter === undefined) {
                throw new RequiredError('filter','Required parameter filter was null or undefined when calling findAll.');
            }
            const localVarPath = `/api/v1/contest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findOneById.');
            }
            const localVarPath = `/api/v1/contest/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContestControllerApi - functional programming interface
 * @export
 */
export const ContestControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ContestFilterDto} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(filter: ContestFilterDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContestDto>> {
            const localVarAxiosArgs = ContestControllerApiAxiosParamCreator(configuration).findAll(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContestDto> {
            const localVarAxiosArgs = ContestControllerApiAxiosParamCreator(configuration).findOneById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ContestControllerApi - factory interface
 * @export
 */
export const ContestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {ContestFilterDto} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(filter: ContestFilterDto, options?: any) {
            return ContestControllerApiFp(configuration).findAll(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneById(id: number, options?: any) {
            return ContestControllerApiFp(configuration).findOneById(id, options)(axios, basePath);
        },
    };
};

/**
 * ContestControllerApi - object-oriented interface
 * @export
 * @class ContestControllerApi
 * @extends {BaseAPI}
 */
export class ContestControllerApi extends BaseAPI {
    /**
     * 
     * @param {ContestFilterDto} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContestControllerApi
     */
    public findAll(filter: ContestFilterDto, options?: any) {
        return ContestControllerApiFp(this.configuration).findAll(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContestControllerApi
     */
    public findOneById(id: number, options?: any) {
        return ContestControllerApiFp(this.configuration).findOneById(id, options)(this.axios, this.basePath);
    }

}


/**
 * LoginControllerApi - axios parameter creator
 * @export
 */
export const LoginControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginDto: LoginDto, options: any = {}): RequestArgs {
            // verify required parameter 'loginDto' is not null or undefined
            if (loginDto === null || loginDto === undefined) {
                throw new RequiredError('loginDto','Required parameter loginDto was null or undefined when calling login.');
            }
            const localVarPath = `/api/v1/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof loginDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginDto !== undefined ? loginDto : {}) : (loginDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginControllerApi - functional programming interface
 * @export
 */
export const LoginControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginDto: LoginDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = LoginControllerApiAxiosParamCreator(configuration).login(loginDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LoginControllerApi - factory interface
 * @export
 */
export const LoginControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginDto: LoginDto, options?: any) {
            return LoginControllerApiFp(configuration).login(loginDto, options)(axios, basePath);
        },
    };
};

/**
 * LoginControllerApi - object-oriented interface
 * @export
 * @class LoginControllerApi
 * @extends {BaseAPI}
 */
export class LoginControllerApi extends BaseAPI {
    /**
     * 
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public login(loginDto: LoginDto, options?: any) {
        return LoginControllerApiFp(this.configuration).login(loginDto, options)(this.axios, this.basePath);
    }

}


/**
 * RegistrationControllerApi - axios parameter creator
 * @export
 */
export const RegistrationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RegistrationDto} registrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration(registrationDto: RegistrationDto, options: any = {}): RequestArgs {
            // verify required parameter 'registrationDto' is not null or undefined
            if (registrationDto === null || registrationDto === undefined) {
                throw new RequiredError('registrationDto','Required parameter registrationDto was null or undefined when calling createRegistration.');
            }
            const localVarPath = `/api/v1/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof registrationDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registrationDto !== undefined ? registrationDto : {}) : (registrationDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration1(code: string, options: any = {}): RequestArgs {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling createRegistration1.');
            }
            const localVarPath = `/api/v1/register/confirm`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrationControllerApi - functional programming interface
 * @export
 */
export const RegistrationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RegistrationDto} registrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration(registrationDto: RegistrationDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = RegistrationControllerApiAxiosParamCreator(configuration).createRegistration(registrationDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration1(code: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = RegistrationControllerApiAxiosParamCreator(configuration).createRegistration1(code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RegistrationControllerApi - factory interface
 * @export
 */
export const RegistrationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {RegistrationDto} registrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration(registrationDto: RegistrationDto, options?: any) {
            return RegistrationControllerApiFp(configuration).createRegistration(registrationDto, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration1(code: string, options?: any) {
            return RegistrationControllerApiFp(configuration).createRegistration1(code, options)(axios, basePath);
        },
    };
};

/**
 * RegistrationControllerApi - object-oriented interface
 * @export
 * @class RegistrationControllerApi
 * @extends {BaseAPI}
 */
export class RegistrationControllerApi extends BaseAPI {
    /**
     * 
     * @param {RegistrationDto} registrationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public createRegistration(registrationDto: RegistrationDto, options?: any) {
        return RegistrationControllerApiFp(this.configuration).createRegistration(registrationDto, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public createRegistration1(code: string, options?: any) {
        return RegistrationControllerApiFp(this.configuration).createRegistration1(code, options)(this.axios, this.basePath);
    }

}


