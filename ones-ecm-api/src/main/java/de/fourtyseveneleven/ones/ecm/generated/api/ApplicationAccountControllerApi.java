/*
 * vdd4ones
 * Rest-Interface for ONES
 *
 * The version of the OpenAPI document: 1.0a
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.fourtyseveneleven.ones.ecm.generated.api;

import de.fourtyseveneleven.ones.ecm.generated.ApiClient;
import de.fourtyseveneleven.ones.ecm.generated.ApiException;
import de.fourtyseveneleven.ones.ecm.generated.ApiResponse;
import de.fourtyseveneleven.ones.ecm.generated.Pair;

import de.fourtyseveneleven.ones.ecm.generated.model.RegisterAccount;
import de.fourtyseveneleven.ones.ecm.generated.model.RegisterResponce;
import de.fourtyseveneleven.ones.ecm.generated.model.RegisteredAccount;
import de.fourtyseveneleven.ones.ecm.generated.model.UpdateAccount;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-18T21:36:06.752097737+01:00[Europe/Berlin]")
public class ApplicationAccountControllerApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public ApplicationAccountControllerApi() {
    this(new ApiClient());
  }

  public ApplicationAccountControllerApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * 
   * @param accountUuid  (required)
   * @return RegisteredAccount
   * @throws ApiException if fails to make API call
   */
  public RegisteredAccount getAccoundByUuid(String accountUuid) throws ApiException {
    ApiResponse<RegisteredAccount> localVarResponse = getAccoundByUuidWithHttpInfo(accountUuid);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param accountUuid  (required)
   * @return ApiResponse&lt;RegisteredAccount&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RegisteredAccount> getAccoundByUuidWithHttpInfo(String accountUuid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAccoundByUuidRequestBuilder(accountUuid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("getAccoundByUuid", localVarResponse);
      }
      return new ApiResponse<RegisteredAccount>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegisteredAccount>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAccoundByUuidRequestBuilder(String accountUuid) throws ApiException {
    // verify the required parameter 'accountUuid' is set
    if (accountUuid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountUuid' when calling getAccoundByUuid");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rest/application/register/account/{accountUuid}"
        .replace("{accountUuid}", ApiClient.urlEncode(accountUuid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param registerAccount  (required)
   * @return RegisterResponce
   * @throws ApiException if fails to make API call
   */
  public RegisterResponce postRegisterAccount(RegisterAccount registerAccount) throws ApiException {
    ApiResponse<RegisterResponce> localVarResponse = postRegisterAccountWithHttpInfo(registerAccount);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param registerAccount  (required)
   * @return ApiResponse&lt;RegisterResponce&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RegisterResponce> postRegisterAccountWithHttpInfo(RegisterAccount registerAccount) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = postRegisterAccountRequestBuilder(registerAccount);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("postRegisterAccount", localVarResponse);
      }
      return new ApiResponse<RegisterResponce>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegisterResponce>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder postRegisterAccountRequestBuilder(RegisterAccount registerAccount) throws ApiException {
    // verify the required parameter 'registerAccount' is set
    if (registerAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'registerAccount' when calling postRegisterAccount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rest/application/register/account";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(registerAccount);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param accountUuid  (required)
   * @param updateAccount  (required)
   * @return RegisterResponce
   * @throws ApiException if fails to make API call
   */
  public RegisterResponce putRegisterAccount(String accountUuid, UpdateAccount updateAccount) throws ApiException {
    ApiResponse<RegisterResponce> localVarResponse = putRegisterAccountWithHttpInfo(accountUuid, updateAccount);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param accountUuid  (required)
   * @param updateAccount  (required)
   * @return ApiResponse&lt;RegisterResponce&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RegisterResponce> putRegisterAccountWithHttpInfo(String accountUuid, UpdateAccount updateAccount) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = putRegisterAccountRequestBuilder(accountUuid, updateAccount);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("putRegisterAccount", localVarResponse);
      }
      return new ApiResponse<RegisterResponce>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegisterResponce>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder putRegisterAccountRequestBuilder(String accountUuid, UpdateAccount updateAccount) throws ApiException {
    // verify the required parameter 'accountUuid' is set
    if (accountUuid == null) {
      throw new ApiException(400, "Missing the required parameter 'accountUuid' when calling putRegisterAccount");
    }
    // verify the required parameter 'updateAccount' is set
    if (updateAccount == null) {
      throw new ApiException(400, "Missing the required parameter 'updateAccount' when calling putRegisterAccount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rest/application/register/account/{accountUuid}"
        .replace("{accountUuid}", ApiClient.urlEncode(accountUuid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateAccount);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param uuid  (required)
   * @param code  (required)
   * @return RegisterResponce
   * @throws ApiException if fails to make API call
   */
  public RegisterResponce putRegisterAccountUnlock(String uuid, String code) throws ApiException {
    ApiResponse<RegisterResponce> localVarResponse = putRegisterAccountUnlockWithHttpInfo(uuid, code);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param uuid  (required)
   * @param code  (required)
   * @return ApiResponse&lt;RegisterResponce&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RegisterResponce> putRegisterAccountUnlockWithHttpInfo(String uuid, String code) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = putRegisterAccountUnlockRequestBuilder(uuid, code);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw getApiException("putRegisterAccountUnlock", localVarResponse);
      }
      return new ApiResponse<RegisterResponce>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegisterResponce>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder putRegisterAccountUnlockRequestBuilder(String uuid, String code) throws ApiException {
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      throw new ApiException(400, "Missing the required parameter 'uuid' when calling putRegisterAccountUnlock");
    }
    // verify the required parameter 'code' is set
    if (code == null) {
      throw new ApiException(400, "Missing the required parameter 'code' when calling putRegisterAccountUnlock");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rest/application/register/account/unlock";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uuid", uuid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("code", code));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
